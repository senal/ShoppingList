------------------------------
--- updating deployments -----
------------------------------

step 1
    - make change to your project.
    - re-build the image with a new version number.
    - in the deployment config update the version of the image.
    - run the command kubctl apply -f [depl-file-name].

step 2 (Prefered method to update deployment config file with new images)
    - make sure the deployment is using the "latest" tag in the pod spec section.
    - make an update to your code.
    - build the image.
    - push the image to docker hub.
    - run the command 
        kubectl rollout restart deployment [depl-name]

----------------------------
------- Services -----------
----------------------------

Provids networking between pods.
also allow access to pods from outside world.

--- Types of Services ---
1. Cluster  IP: Sets up an easy-to-remember URL to access a pod. Only exposes pods in the cluster. ( This can be used to internal communication )
2. Node Port: Makes a pod accessible from outside the cluster. Usually only used for dev purposes. 
3. Load Balancer:  Makes a pod accessible from outside the cluster. This is the right way to expose a pod to the outside world.
4. External Name: Redirects an in-cluster request to a CNAME url (No need to worry about this one.)


----------------------------
----- NGNIX Ingress controller----
----------------------------
https://kubernetes.github.io/ingress-nginx/deploy/#provider-specific-steps

------------------------------------------
--------- IMPORTANT NOTE -----------------

Ingress 
It's important to create a ingress controller applying the following config
kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.47.0/deploy/static/provider/cloud/deploy.yaml

Also note that, whenever you restart or recreate your cluster, above configurations will be deleted hence re-running the above configuration is required.


------------------------------------------




Ingress controller can not do routing base on the request method.
Method POST route /list
Method GET route /list

Though the above requests have 2 distinct methods their path looks same.
Ingress controller won't be able to understand these requests are 2 different methods.

--- Defining query parameters in the path
e.g
    - path: /list/?(.*)
        e.g: list/1  ---> returns the detail of the stated list id.

    - path: /list/delete/?(.*)
        e.g: /list/delete/2 ----> deletes the specified list.

    - path list/?(.*)/shop
        e.g: /list/1/2 ----> returns the shops belongs to the provided list item.

    - path list/?(.*)/items
        e.g: /list/1/items ----> returns the product items belongs to the provided list item.